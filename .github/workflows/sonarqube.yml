name: PR Quality Check

on:
  pull_request:
    branches:
      - '**'  # Trigger on all PRs

jobs:
  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    outputs:
      major_issues: ${{ steps.sonar_check.outputs.major_issues }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
        run: |
          ./gradlew sonarqube \
            -Dsonar.projectKey=$PROJECT_NAME \
            -Dsonar.projectName=$PROJECT_NAME \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch number of major issues
        id: sonar_check
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
        run: |
          response=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/issues/search?componentKeys=$PROJECT_NAME&severities=MAJOR")
          count=$(echo "$response" | jq '.total')
          echo "Major issues found: $count"
          echo "major_issues=$count" >> $GITHUB_OUTPUT

      - name: Fail if too many major issues
        if: steps.sonar_check.outputs.major_issues > 150
        run: |
          echo "❌ Merge blocked: More than 150 major issues found."
          exit 1

  approval:
    name: Reviewer Approval Check
    runs-on: ubuntu-latest
    needs: sonar  # runs after sonar
    if: needs.sonar.result == 'success'

    steps:
      - name: Check PR approval
        env:
          REVIEWER_NAME: ${{ secrets.REVIEWER_NAME }}  # e.g. RajCamrix,TrushangKCMX
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const requiredUsers = process.env.REVIEWER_NAME.split(',').map(s => s.trim());

            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
            });

            const pr = prs.find(pr => pr.head.sha === context.sha);
            if (!pr) {
              core.setFailed("❌ No PR found for this commit.");
              return;
            }

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
            });

            const approvedBy = reviews.filter(r => r.state === 'APPROVED').map(r => r.user.login);
            const isApproved = requiredUsers.some(user => approvedBy.includes(user));

            if (!isApproved) {
              core.setFailed(`❌ PR must be approved by one of: ${requiredUsers.join(', ')}. Approved by: ${approvedBy.join(', ') || 'no one'}`);
            } else {
              console.log(`✅ Approved by at least one required user.`);
            }

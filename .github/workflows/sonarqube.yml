name: PR Quality Check

on:
  pull_request:
    branches:
      - '**'  # Trigger on all PRs

jobs:
  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
        run: |
          ./gradlew sonarqube \
            -Dsonar.projectKey=$PROJECT_NAME \
            -Dsonar.projectName=$PROJECT_NAME \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.scanner.dumpToFile=true

      - name: Check SonarQube Quality Gate
        id: qualitygate
        uses: SonarSource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  approval:
    name: Reviewer Approval Check
    runs-on: ubuntu-latest
    needs: sonar
    if: needs.sonar.result == 'success'

    steps:
      - name: Check PR approval
        env:
          REVIEWER_NAME: ${{ secrets.REVIEWER_NAME }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const requiredUsers = process.env.REVIEWER_NAME.split(',').map(s => s.trim());
            const prNumber = context.payload.pull_request.number;

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            const approvedBy = reviews
              .filter(r => r.state === 'APPROVED')
              .map(r => r.user.login);

            const isApproved = requiredUsers.some(user => approvedBy.includes(user));

            if (!isApproved) {
              core.setFailed(`❌ PR must be approved by one of: ${requiredUsers.join(', ')}. Approved by: ${approvedBy.join(', ') || 'no one'}`);
            } else {
              console.log(`✅ Approved by at least one required user: ${approvedBy.join(', ')}`);
            }
